Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 559, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Imports
%matplotlib notebook

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, FFMpegFileWriter
import seaborn as sns
sns.set_style('darkgrid')

# 1D simulation of the Brownian motion process
total_time = 1
nb_steps = 1000
delta_t = total_time / nb_steps
mean = 0.  # Mean of each movement
stdev = np.sqrt(delta_t)  # Standard deviation of each movement
t = np.arange(0, total_time, delta_t)

# First set up the figure, the axis, and the plot element we want to animate
fig = plt.figure(num='Brownian motion sample paths', figsize=(10, 8))
ax = plt.axes(xlim=(0, total_time), ylim=(-2.5, 2.5))
ax.set_xlabel('time', fontsize=13)
ax.set_ylabel('position', fontsize=13)
line, = ax.plot([], [], lw=2)

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return line,

# animation function.  This is called sequentially
def animate(i):
    t = np.arange(0, total_time, delta_t)
    distances = np.cumsum(
        np.random.normal(
            mean, stdev, (1, nb_steps)),
        axis=1)
    line.set_data(t, distances)
    return line,

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = FuncAnimation(fig, animate, init_func=init,
                     frames=50, interval=400, blit=True)

anim.save('bm.gif', writer=FFMpegFileWriter(fps=2))

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m/tmp/ipykernel_1663/2753844861.py[0m in [0;36m<module>[0;34m[0m
[1;32m     42[0m                      frames=50, interval=400, blit=True)
[1;32m     43[0m [0;34m[0m[0m
[0;32m---> 44[0;31m [0manim[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m'bm.gif'[0m[0;34m,[0m [0mwriter[0m[0;34m=[0m[0mFFMpegFileWriter[0m[0;34m([0m[0mfps[0m[0;34m=[0m[0;36m2[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36msave[0;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs, progress_callback)[0m
[1;32m   1175[0m                         [0mprogress_callback[0m[0;34m([0m[0mframe_number[0m[0;34m,[0m [0mtotal_frames[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1176[0m                         [0mframe_number[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1177[0;31m                 [0mwriter[0m[0;34m.[0m[0mgrab_frame[0m[0;34m([0m[0;34m**[0m[0msavefig_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1178[0m [0;34m[0m[0m
[1;32m   1179[0m     [0;32mdef[0m [0m_step[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py[0m in [0;36m__exit__[0;34m(self, type, value, traceback)[0m
[1;32m    117[0m         [0;32mif[0m [0mtype[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    118[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 119[0;31m                 [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    120[0m             [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    121[0m                 [0;32mreturn[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36msaving[0;34m(self, fig, outfile, dpi, *args, **kwargs)[0m
[1;32m    236[0m             [0;32myield[0m [0mself[0m[0;34m[0m[0;34m[0m[0m
[1;32m    237[0m         [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 238[0;31m             [0mself[0m[0;34m.[0m[0mfinish[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    239[0m [0;34m[0m[0m
[1;32m    240[0m [0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36mfinish[0;34m(self)[0m
[1;32m    503[0m         [0;31m# Call run here now that all frame grabbing is done. All temp files[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    504[0m         [0;31m# are available to be assembled.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 505[0;31m         [0mself[0m[0;34m.[0m[0m_run[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    506[0m         [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mfinish[0m[0;34m([0m[0;34m)[0m  [0;31m# Will call clean-up[0m[0;34m[0m[0;34m[0m[0m
[1;32m    507[0m [0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36m_run[0;34m(self)[0m
[1;32m    336[0m         self._proc = subprocess.Popen(
[1;32m    337[0m             [0mcommand[0m[0;34m,[0m [0mstdin[0m[0;34m=[0m[0mPIPE[0m[0;34m,[0m [0mstdout[0m[0;34m=[0m[0mPIPE[0m[0;34m,[0m [0mstderr[0m[0;34m=[0m[0mPIPE[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 338[0;31m             creationflags=subprocess_creation_flags)
[0m[1;32m    339[0m [0;34m[0m[0m
[1;32m    340[0m     [0;32mdef[0m [0mfinish[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/subprocess.py[0m in [0;36m__init__[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, encoding, errors, text)[0m
[1;32m    798[0m                                 [0mc2pread[0m[0;34m,[0m [0mc2pwrite[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    799[0m                                 [0merrread[0m[0;34m,[0m [0merrwrite[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 800[0;31m                                 restore_signals, start_new_session)
[0m[1;32m    801[0m         [0;32mexcept[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    802[0m             [0;31m# Cleanup if the child failed starting.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/subprocess.py[0m in [0;36m_execute_child[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, start_new_session)[0m
[1;32m   1549[0m                         [0;32mif[0m [0merrno_num[0m [0;34m==[0m [0merrno[0m[0;34m.[0m[0mENOENT[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1550[0m                             [0merr_msg[0m [0;34m+=[0m [0;34m': '[0m [0;34m+[0m [0mrepr[0m[0;34m([0m[0merr_filename[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1551[0;31m                     [0;32mraise[0m [0mchild_exception_type[0m[0;34m([0m[0merrno_num[0m[0;34m,[0m [0merr_msg[0m[0;34m,[0m [0merr_filename[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1552[0m                 [0;32mraise[0m [0mchild_exception_type[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1553[0m [0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'ffmpeg': 'ffmpeg'
FileNotFoundError: [Errno 2] No such file or directory: 'ffmpeg': 'ffmpeg'

